# pylint: disable=too-many-arguments
"""
Photo upload endpoint is defined here.
"""
from fastapi import APIRouter, Depends, File, Form, UploadFile
from sqlalchemy.ext.asyncio import AsyncConnection
from starlette import status

from facades_api.db.connection import get_connection
from facades_api.db.entities.enums import PTEnum
from facades_api.dto import User as UserDTO
from facades_api.logic import classify_defects, save_classification_results, save_photo
from facades_api.logic.exceptions import FileSizeError
from facades_api.schemas import UploadPhotoResponse
from facades_api.utils.dependencies import user_dependency

api_router = APIRouter(tags=["Photos"])


@api_router.post(
    "/photo/upload",
    status_code=status.HTTP_200_OK,
    response_model=UploadPhotoResponse,
)
async def upload_photo(
    building_id: int = Form(...),
    angle_type: PTEnum = Form(...),
    photo_file: UploadFile = File(...),
    user: UserDTO = Depends(user_dependency),
    conn: AsyncConnection = Depends(get_connection),
):
    """
    Upload photo to the system and get `photo_id` and `mark_id` generated by the classifier.
    """
    photo = await photo_file.read(20 << 20)
    if not (600 << 10) <= len(photo) < (20 << 20):  # 600kb .. 20mb
        raise FileSizeError(len(photo))
    photo_id, photo_saved = await save_photo(conn, photo, user.id, building_id, angle_type)
    classification_results = await classify_defects(photo_saved)
    mark_id = await save_classification_results(conn, photo_id, classification_results)
    return UploadPhotoResponse(photo_id=photo_id, classifier_mark_id=mark_id)
